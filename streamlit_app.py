import streamlit as st
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix # –î–æ–±–∞–≤–ª–µ–Ω–æ: confusion_matrix
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.linear_model import LogisticRegression # –î–æ–±–∞–≤–ª–µ–Ω–æ: LogisticRegression
from sklearn.ensemble import RandomForestClassifier # –î–æ–±–∞–≤–ª–µ–Ω–æ: RandomForestClassifier
import category_encoders as ce
import plotly.express as px
import plotly.graph_objects as go # –î–æ–±–∞–≤–ª–µ–Ω–æ: go –¥–ª—è Gauge chart


# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit ---
st.set_page_config(page_title="üö¢ –ü—Ä–æ–≥–Ω–æ–∑ –≤—ã–∂–∏–≤–∞–Ω–∏—è –Ω–∞ –¢–∏—Ç–∞–Ω–∏–∫–µ", layout="wide")
st.title('üö¢ –ü—Ä–æ–≥–Ω–æ–∑ –≤—ã–∂–∏–≤–∞–Ω–∏—è –Ω–∞ –¢–∏—Ç–∞–Ω–∏–∫–µ - –û–±—É—á–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ')
st.write('## –†–∞–±–æ—Ç–∞ —Å –¥–∞—Ç–∞—Å–µ—Ç–æ–º –¢–∏—Ç–∞–Ω–∏–∫–∞')

df = pd.read_csv("https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv")

# --- –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
# –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–ø—É—Å–∫–∏ –≤ 'Age' –º–µ–¥–∏–∞–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
df['Age'].fillna(df['Age'].median(), inplace=True)
# –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–ø—É—Å–∫–∏ –≤ 'Embarked' —Å–∞–º—ã–º —á–∞—Å—Ç—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º (–º–æ–¥–æ–π)
df['Embarked'].fillna(df['Embarked'].mode()[0], inplace=True)
# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º 'Survived' –≤ –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω—ã–µ –º–µ—Ç–∫–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
df['SurvivalStatus'] = df['Survived'].map({0: '–ù–µ –≤—ã–∂–∏–ª', 1: '–í—ã–∂–∏–ª'})

---
## –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (Feature Engineering)
# –≠—Ç–∏ —Å—Ç—Ä–æ–∫–∏ –î–û–õ–ñ–ù–´ –ë–´–¢–¨ –î–û –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è FamilySize, IsAlone, Title
df['FamilySize'] = df['SibSp'] + df['Parch'] + 1
df['IsAlone'] = (df['FamilySize'] == 1).astype(int) # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
df['Title'] = df['Name'].apply(lambda x: x.split(',')[1].split('.')[0].strip())
# –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–µ–¥–∫–∏—Ö —Ç–∏—Ç—É–ª–æ–≤ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è
rare_titles = df['Title'].value_counts() < 10
df['Title'] = df['Title'].apply(lambda x: 'Rare' if rare_titles[x] else x)
---

st.subheader("üîç –°–ª—É—á–∞–π–Ω—ã–µ 10 —Å—Ç—Ä–æ–∫")
st.dataframe(df.sample(10), use_container_width=True)

st.subheader("üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
col1, col2 = st.columns(2)

with col1:
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã–∂–∏–≤—à–∏—Ö –ø–æ –∫–ª–∞—Å—Å—É –±–∏–ª–µ—Ç–∞
    fig1 = px.histogram(df, x="Pclass", color="SurvivalStatus", barmode="group",
                        title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã–∂–∏–≤—à–∏—Ö –ø–æ –∫–ª–∞—Å—Å—É –±–∏–ª–µ—Ç–∞",
                        labels={'Pclass': '–ö–ª–∞—Å—Å –±–∏–ª–µ—Ç–∞', 'SurvivalStatus': '–°—Ç–∞—Ç—É—Å –≤—ã–∂–∏–≤–∞–Ω–∏—è'})
    st.plotly_chart(fig1, use_container_width=True)

with col2:
    # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –≤—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏ –æ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏ –ø–æ–ª–∞
    fig2 = px.scatter(df, x="Age", y="Fare", color="SurvivalStatus",
                      title="–°—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞ vs –í–æ–∑—Ä–∞—Å—Ç",
                      labels={'Age': '–í–æ–∑—Ä–∞—Å—Ç', 'Fare': '–°—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞', 'SurvivalStatus': '–°—Ç–∞—Ç—É—Å –≤—ã–∂–∏–≤–∞–Ω–∏—è'})
    st.plotly_chart(fig2, use_container_width=True)

# --- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è (–¥–ª—è –≤–µ—Ä—Ö–Ω–µ–π —Å–µ–∫—Ü–∏–∏ "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –ø–æ —Ç–æ—á–Ω–æ—Å—Ç–∏") ---
# –≠—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–∏ –µ—â–µ –Ω–µ –≤–∫–ª—é—á–∞—é—Ç FamilySize, IsAlone, Title, —á—Ç–æ–±—ã —Å–æ–æ—Ç–Ω–µ—Å—Ç–∏ —Å –≤–∞—à–µ–π –∏—Å—Ö–æ–¥–Ω–æ–π –ª–æ–≥–∏–∫–æ–π.
# –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –∏ —ç—Ç–∞ —Å–µ–∫—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞ –Ω–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏, –∏–∑–º–µ–Ω–∏—Ç–µ features_for_initial_comparison
features_for_initial_comparison = ['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']
X_initial_comparison = df[features_for_initial_comparison]
y_initial_comparison = df['Survived']

X_train_initial_comparison, X_test_initial_comparison, y_train_initial_comparison, y_test_initial_comparison = train_test_split(X_initial_comparison, y_initial_comparison, test_size=0.3, random_state=42, stratify=y_initial_comparison)

# --- –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –≤–µ—Ä—Ö–Ω–µ–π —Å–µ–∫—Ü–∏–∏ ---
encoder_initial_comparison = ce.TargetEncoder(cols=['Sex', 'Embarked'])
X_train_encoded_initial_comparison = encoder_initial_comparison.fit_transform(X_train_initial_comparison, y_train_initial_comparison)
X_test_encoded_initial_comparison = encoder_initial_comparison.transform(X_test_initial_comparison)

# --- –û–±—É—á–µ–Ω–∏–µ –∏ –æ—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–µ–π ---
models = {
    'Decision Tree': DecisionTreeClassifier(random_state=42),
    'KNN': KNeighborsClassifier()
}

results = []
for name, model in models.items():
    model.fit(X_train_encoded_initial_comparison, y_train_initial_comparison)
    acc_train = accuracy_score(y_train_initial_comparison, model.predict(X_train_encoded_initial_comparison))
    acc_test = accuracy_score(y_test_initial_comparison, model.predict(X_test_encoded_initial_comparison))
    results.append({
        'Model': name,
        'Train Accuracy': round(acc_train, 2),
        'Test Accuracy': round(acc_test, 2)
    })

st.write("### üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –ø–æ —Ç–æ—á–Ω–æ—Å—Ç–∏")
st.table(pd.DataFrame(results))

# --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ ---
st.sidebar.header("üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º")

# –í–∏–¥–∂–µ—Ç—ã –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
# –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –∑–¥–µ—Å—å —è –æ—Å—Ç–∞–≤–∏–ª —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏, —á—Ç–æ–±—ã –Ω–µ —É—Å–ª–æ–∂–Ω—è—Ç—å.
# –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –±–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Ç–æ–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞ FamilySize, IsAlone, Title,
# –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–ª–∞–π–¥–µ—Ä—ã/—Å–µ–ª–µ–∫—Ç–æ—Ä—ã –∏ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∏—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏—è.
pclass_input_sb = st.sidebar.selectbox("–ö–ª–∞—Å—Å –±–∏–ª–µ—Ç–∞", sorted(df['Pclass'].unique()), key='sb_pclass')
sex_input_sb = st.sidebar.selectbox("–ü–æ–ª", df['Sex'].unique(), key='sb_sex')
age_input_sb = st.sidebar.slider("–í–æ–∑—Ä–∞—Å—Ç", int(df['Age'].min()), int(df['Age'].max()), int(df['Age'].mean()), key='sb_age')
sibsp_input_sb = st.sidebar.slider("–ö–æ–ª-–≤–æ –±—Ä–∞—Ç—å–µ–≤/—Å–µ—Å—Ç–µ—Ä/—Å—É–ø—Ä—É–≥–æ–≤ –Ω–∞ –±–æ—Ä—Ç—É", int(df['SibSp'].min()), int(df['SibSp'].max()), int(df['SibSp'].mode()[0]), key='sb_sibsp')
parch_input_sb = st.sidebar.slider("–ö–æ–ª-–≤–æ —Ä–æ–¥–∏—Ç–µ–ª–µ–π/–¥–µ—Ç–µ–π –Ω–∞ –±–æ—Ä—Ç—É", int(df['Parch'].min()), int(df['Parch'].max()), int(df['Parch'].mode()[0]), key='sb_parch')
fare_input_sb = st.sidebar.slider("–°—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞", float(df['Fare'].min()), float(df['Fare'].max()), float(df['Fare'].median()), key='sb_fare')
embarked_input_sb = st.sidebar.selectbox("–ü–æ—Ä—Ç –ø–æ—Å–∞–¥–∫–∏", df['Embarked'].unique(), key='sb_embarked')

user_input_sb = pd.DataFrame([{
    'Pclass': pclass_input_sb,
    'Sex': sex_input_sb,
    'Age': age_input_sb,
    'SibSp': sibsp_input_sb,
    'Parch': parch_input_sb,
    'Fare': fare_input_sb,
    'Embarked': embarked_input_sb
}])

user_encoded_sb = encoder_initial_comparison.transform(user_input_sb)
user_encoded_sb = user_encoded_sb[X_train_encoded_initial_comparison.columns]


st.sidebar.subheader("üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
for name, model in models.items():
    pred_val = model.predict(user_encoded_sb)[0]
    pred_text = "–í—ã–∂–∏–ª" if pred_val == 1 else "–ù–µ –≤—ã–∂–∏–ª"
    proba = model.predict_proba(user_encoded_sb)[0]

    st.sidebar.markdown(f"**{name}: {pred_text}**")
    proba_df = pd.DataFrame({
        '–°—Ç–∞—Ç—É—Å': ['–ù–µ –≤—ã–∂–∏–ª', '–í—ã–∂–∏–ª'],
        '–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å': proba
    })
    st.sidebar.dataframe(proba_df.set_index("–°—Ç–∞—Ç—É—Å"), use_container_width=True)


# --- –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ ---
tab1, tab2, tab3 = st.tabs(["üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö", "ü§ñ –û–±—É—á–µ–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–µ–π", "üîÆ –°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑"])

# --- –í–ö–õ–ê–î–ö–ê 1: –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• ---
with tab1:
    st.header("–û–±–∑–æ—Ä –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
    st.write("### üìã –î–∞–Ω–Ω—ã–µ –æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞—Ö")
    st.dataframe(df.head(10), use_container_width=True)

    st.write("### üìà –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏")
    col1, col2 = st.columns(2)
    with col1:
        # –í—ã–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        feature_to_plot = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—ã–∂–∏–≤—à–∏—Ö:",
            ('Pclass', 'Sex', 'Embarked', 'FamilySize', 'Title') # FamilySize –∏ Title —Ç–µ–ø–µ—Ä—å —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        )
        fig1 = px.histogram(df, x=feature_to_plot, color="SurvivalStatus", barmode="group",
                            title=f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã–∂–∏–≤—à–∏—Ö –ø–æ –ø—Ä–∏–∑–Ω–∞–∫—É '{feature_to_plot}'",
                            labels={'SurvivalStatus': '–°—Ç–∞—Ç—É—Å –≤—ã–∂–∏–≤–∞–Ω–∏—è'},
                            color_discrete_map={'–ù–µ –≤—ã–∂–∏–ª': '#EF553B', '–í—ã–∂–∏–ª': '#636EFA'})
        st.plotly_chart(fig1, use_container_width=True)

    with col2:
        # Violin plot –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
        fig2 = px.violin(df, x="Sex", y="Age", color="SurvivalStatus", box=True, points="all",
                         title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–æ –ø–æ–ª—É –∏ —Å—Ç–∞—Ç—É—Å—É –≤—ã–∂–∏–≤–∞–Ω–∏—è",
                         labels={'Sex': '–ü–æ–ª', 'Age': '–í–æ–∑—Ä–∞—Å—Ç', 'SurvivalStatus': '–°—Ç–∞—Ç—É—Å –≤—ã–∂–∏–≤–∞–Ω–∏—è'},
                         color_discrete_map={'–ù–µ –≤—ã–∂–∏–ª': '#EF553B', '–í—ã–∂–∏–ª': '#636EFA'})
        st.plotly_chart(fig2, use_container_width=True)

    st.write("### ‚òÄÔ∏è –ò–µ—Ä–∞—Ä—Ö–∏—è –≤—ã–∂–∏–≤–∞–Ω–∏—è")
    fig3 = px.sunburst(df, path=['Pclass', 'Sex', 'SurvivalStatus'],
                               title="–ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã–∂–∏–≤—à–∏—Ö –ø–æ –∫–ª–∞—Å—Å—É –∏ –ø–æ–ª—É",
                               color_discrete_map={'(?)':'gold', '–ù–µ –≤—ã–∂–∏–ª': '#EF553B', '–í—ã–∂–∏–ª': '#636EFA'})
    st.plotly_chart(fig3, use_container_width=True)


# --- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–¥–µ–ª–µ–π (–¥–ª—è –≤–∫–ª–∞–¥–æ–∫ 2 –∏ 3) ---
# –¢–µ–ø–µ—Ä—å —ç—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ df
features = ['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked', 'FamilySize', 'IsAlone', 'Title']
X = df[features] # –¢–µ–ø–µ—Ä—å —ç—Ç–æ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ KeyError
y = df['Survived']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42, stratify=y)

# Encoder –¥–ª—è –≤—Å–µ—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤, –≤–∫–ª—é—á–∞—è –Ω–æ–≤—ã–µ, –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ç–∞–±–∞—Ö
encoder = ce.TargetEncoder(cols=['Sex', 'Embarked', 'Title', 'IsAlone'])
X_train_encoded = encoder.fit_transform(X_train, y_train)
X_test_encoded = encoder.transform(X_test)

# --- –í–ö–õ–ê–î–ö–ê 2: –û–ë–£–ß–ï–ù–ò–ï –ò –ù–ê–°–¢–†–û–ô–ö–ê –ú–û–î–ï–õ–ï–ô ---
with tab2:
    st.header("–í—ã–±–æ—Ä –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è")
    model_choice = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –æ–±—É—á–µ–Ω–∏—è:",
        ("Decision Tree", "K-Nearest Neighbors", "Logistic Regression", "Random Forest")
    )

    params = {}
    model_trained = None # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å "model" –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–µ–∫—Ü–∏–∏
    if model_choice == "Decision Tree":
        params['max_depth'] = st.slider("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ –¥–µ—Ä–µ–≤–∞ (max_depth)", 2, 20, 5, 1)
        params['min_samples_leaf'] = st.slider("–ú–∏–Ω. —á–∏—Å–ª–æ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –ª–∏—Å—Ç–µ (min_samples_leaf)", 1, 50, 5, 1)
        model_trained = DecisionTreeClassifier(random_state=42, **params)
    elif model_choice == "K-Nearest Neighbors":
        params['n_neighbors'] = st.slider("–ß–∏—Å–ª–æ —Å–æ—Å–µ–¥–µ–π (n_neighbors)", 1, 20, 5, 1)
        model_trained = KNeighborsClassifier(**params)
    elif model_choice == "Logistic Regression":
        params['C'] = st.slider("–°–∏–ª–∞ —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏–∏ (C)", 0.01, 10.0, 1.0, 0.01)
        model_trained = LogisticRegression(random_state=42, max_iter=1000, **params)
    elif model_choice == "Random Forest":
        params['n_estimators'] = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ä–µ–≤—å–µ–≤ (n_estimators)", 50, 500, 100, 10)
        params['max_depth'] = st.slider("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ –¥–µ—Ä–µ–≤–∞ (max_depth)", 2, 20, 7, 1)
        model_trained = RandomForestClassifier(random_state=42, **params)

    if st.button("üöÄ –û–±—É—á–∏—Ç—å –∏ –æ—Ü–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å", use_container_width=True):
        if model_trained is not None:
            model_trained.fit(X_train_encoded, y_train)
            y_pred_train = model_trained.predict(X_train_encoded)
            y_pred_test = model_trained.predict(X_test_encoded)
            acc_train = accuracy_score(y_train, y_pred_train)
            acc_test = accuracy_score(y_test, y_pred_test)

            st.write("### –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ü–µ–Ω–∫–∏:")
            col1, col2 = st.columns(2)
            col1.metric("–¢–æ—á–Ω–æ—Å—Ç—å –Ω–∞ –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–µ", f"{acc_train:.2%}")
            col2.metric("–¢–æ—á–Ω–æ—Å—Ç—å –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ", f"{acc_test:.2%}")

            cm = confusion_matrix(y_test, y_pred_test)
            fig_cm = px.imshow(cm, text_auto=True, aspect="auto",
                                labels=dict(x="–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å", y="–ò—Å—Ç–∏–Ω–Ω—ã–π –∫–ª–∞—Å—Å", color="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"),
                                x=['–ù–µ –≤—ã–∂–∏–ª', '–í—ã–∂–∏–ª'], y=['–ù–µ –≤—ã–∂–∏–ª', '–í—ã–∂–∏–ª'],
                                color_continuous_scale='Blues',
                                title="–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫")
            st.plotly_chart(fig_cm, use_container_width=True)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å –∏ —ç–Ω–∫–æ–¥–µ—Ä –≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞ –¥—Ä—É–≥–æ–π –≤–∫–ª–∞–¥–∫–µ
            st.session_state['model'] = model_trained
            st.session_state['encoder'] = encoder # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—É—á–µ–Ω–Ω—ã–π —ç–Ω–∫–æ–¥–µ—Ä
            st.session_state['X_train_encoded_columns'] = X_train_encoded.columns.tolist() # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –∫–æ–ª–æ–Ω–æ–∫
            st.success("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è!")
        else:
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –æ–±—É—á–µ–Ω–∏—è.")


# --- –í–ö–õ–ê–î–ö–ê 3: –°–î–ï–õ–ê–¢–¨ –ü–†–û–ì–ù–û–ó ---
with tab3:
    st.header("–ü—Ä–æ–≥–Ω–æ–∑ –≤—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏ –ø–∞—Å—Å–∞–∂–∏—Ä–∞")
    if 'model' not in st.session_state or 'encoder' not in st.session_state:
        st.warning("–°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å –Ω–∞ –≤–∫–ª–∞–¥–∫–µ '–û–±—É—á–µ–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–µ–π'!")
    else:
        # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å –∏ —ç–Ω–∫–æ–¥–µ—Ä –∏–∑ session_state
        model_to_predict = st.session_state['model']
        encoder_to_predict = st.session_state['encoder']
        X_train_cols = st.session_state['X_train_encoded_columns']


        st.info("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞—Å—Å–∞–∂–∏—Ä–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑.")
        col1, col2 = st.columns(2)
        with col1:
            pclass_input = st.selectbox("–ö–ª–∞—Å—Å –±–∏–ª–µ—Ç–∞", sorted(df['Pclass'].unique()), key='pclass')
            sex_input = st.selectbox("–ü–æ–ª", df['Sex'].unique(), key='sex')
            age_input = st.slider("–í–æ–∑—Ä–∞—Å—Ç", 0, 100, 30, key='age')
            fare_input = st.slider("–°—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞", 0.0, float(df['Fare'].max()), 32.0, key='fare')

        with col2:
            sibsp_input = st.number_input("–ö–æ–ª-–≤–æ –±—Ä–∞—Ç—å–µ–≤/—Å–µ—Å—Ç–µ—Ä/—Å—É–ø—Ä—É–≥–æ–≤", min_value=0, max_value=10, value=0, key='sibsp')
            parch_input = st.number_input("–ö–æ–ª-–≤–æ —Ä–æ–¥–∏—Ç–µ–ª–µ–π/–¥–µ—Ç–µ–π", min_value=0, max_value=10, value=0, key='parch')
            embarked_input = st.selectbox("–ü–æ—Ä—Ç –ø–æ—Å–∞–¥–∫–∏", df['Embarked'].unique(), key='embarked')
            # –í—ã–±–æ—Ä —Ç–∏—Ç—É–ª–∞ –∏–∑ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            title_input = st.selectbox("–¢–∏—Ç—É–ª", df['Title'].unique(), key='title')


        if st.button("–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑", use_container_width=True, type="primary"):
            # –í—ã—á–∏—Å–ª—è–µ–º FamilySize –∏ IsAlone –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
            family_size = sibsp_input + parch_input + 1
            is_alone = (family_size == 1).astype(int)

            user_input = pd.DataFrame([{
                'Pclass': pclass_input,
                'Sex': sex_input,
                'Age': age_input,
                'SibSp': sibsp_input,
                'Parch': parch_input,
                'Fare': fare_input,
                'Embarked': embarked_input,
                'FamilySize': family_size, # –¢–µ–ø–µ—Ä—å FamilySize –±—É–¥–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
                'IsAlone': is_alone,       # –¢–µ–ø–µ—Ä—å IsAlone –±—É–¥–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
                'Title': title_input       # –¢–µ–ø–µ—Ä—å Title –±—É–¥–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
            }])

            # –ö–æ–¥–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥
            user_encoded = encoder_to_predict.transform(user_input)
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–æ—Ä—è–¥–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–±—É—á–∞—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            user_encoded = user_encoded[X_train_cols]

            # –î–µ–ª–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            prediction = model_to_predict.predict(user_encoded)[0]
            probability = model_to_predict.predict_proba(user_encoded)[0]

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result_col1, result_col2 = st.columns([1, 2])
            with result_col1:
                if prediction == 1:
                    st.metric(label="–ü—Ä–æ–≥–Ω–æ–∑", value="–í—ã–∂–∏–ª", delta="–í—ã—Å–æ–∫–∏–µ —à–∞–Ω—Å—ã")
                    st.image("https://em-content.zobj.net/source/microsoft-teams/363/lifebuoy_1f6df.png", width=150)
                else:
                    st.metric(label="–ü—Ä–æ–≥–Ω–æ–∑", value="–ù–µ –≤—ã–∂–∏–ª", delta="–ù–∏–∑–∫–∏–µ —à–∞–Ω—Å—ã", delta_color="inverse")
                    st.image("https://em-content.zobj.net/source/microsoft-teams/363/skull-and-crossbones_2620-fe0f.png", width=150)

            with result_col2:
                # Gauge chart –¥–ª—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
                fig_gauge = go.Figure(go.Indicator(
                    mode = "gauge+number",
                    value = probability[1] * 100,
                    title = {'text': "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–∂–∏—Ç—å (%)"},
                    gauge = {'axis': {'range': [None, 100]},
                             'bar': {'color': "#636EFA"},
                             'steps' : [
                                 {'range': [0, 50], 'color': "#F0F2F6"},
                                 {'range': [50, 100], 'color': "#D6EAF8"}],
                             }))
                st.plotly_chart(fig_gauge, use_container_width=True)


# import streamlit as st
# import pandas as pd
# from sklearn.model_selection import train_test_split
# from sklearn.metrics import accuracy_score
# from sklearn.tree import DecisionTreeClassifier
# from sklearn.neighbors import KNeighborsClassifier
# import category_encoders as ce
# import plotly.express as px


# # --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit ---
# st.set_page_config(page_title="üö¢ –ü—Ä–æ–≥–Ω–æ–∑ –≤—ã–∂–∏–≤–∞–Ω–∏—è –Ω–∞ –¢–∏—Ç–∞–Ω–∏–∫–µ", layout="wide")
# st.title('üö¢ –ü—Ä–æ–≥–Ω–æ–∑ –≤—ã–∂–∏–≤–∞–Ω–∏—è –Ω–∞ –¢–∏—Ç–∞–Ω–∏–∫–µ - –û–±—É—á–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ')
# st.write('## –†–∞–±–æ—Ç–∞ —Å –¥–∞—Ç–∞—Å–µ—Ç–æ–º –¢–∏—Ç–∞–Ω–∏–∫–∞')

# df = pd.read_csv("https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv")

# # --- –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
# # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–ø—É—Å–∫–∏ –≤ 'Age' –º–µ–¥–∏–∞–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
# df['Age'].fillna(df['Age'].median(), inplace=True)
# # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–ø—É—Å–∫–∏ –≤ 'Embarked' —Å–∞–º—ã–º —á–∞—Å—Ç—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º (–º–æ–¥–æ–π)
# df['Embarked'].fillna(df['Embarked'].mode()[0], inplace=True)
# # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º 'Survived' –≤ –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω—ã–µ –º–µ—Ç–∫–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
# df['SurvivalStatus'] = df['Survived'].map({0: '–ù–µ –≤—ã–∂–∏–ª', 1: '–í—ã–∂–∏–ª'})

# st.subheader("üîç –°–ª—É—á–∞–π–Ω—ã–µ 10 —Å—Ç—Ä–æ–∫")
# st.dataframe(df.sample(10), use_container_width=True)

# st.subheader("üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
# col1, col2 = st.columns(2)

# with col1:
#     # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã–∂–∏–≤—à–∏—Ö –ø–æ –∫–ª–∞—Å—Å—É –±–∏–ª–µ—Ç–∞
#     fig1 = px.histogram(df, x="Pclass", color="SurvivalStatus", barmode="group",
#                         title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã–∂–∏–≤—à–∏—Ö –ø–æ –∫–ª–∞—Å—Å—É –±–∏–ª–µ—Ç–∞",
#                         labels={'Pclass': '–ö–ª–∞—Å—Å –±–∏–ª–µ—Ç–∞', 'SurvivalStatus': '–°—Ç–∞—Ç—É—Å –≤—ã–∂–∏–≤–∞–Ω–∏—è'})
#     st.plotly_chart(fig1, use_container_width=True)

# with col2:
#     # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –≤—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏ –æ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏ –ø–æ–ª–∞
#     fig2 = px.scatter(df, x="Age", y="Fare", color="SurvivalStatus",
#                       title="–°—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞ vs –í–æ–∑—Ä–∞—Å—Ç",
#                       labels={'Age': '–í–æ–∑—Ä–∞—Å—Ç', 'Fare': '–°—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞', 'SurvivalStatus': '–°—Ç–∞—Ç—É—Å –≤—ã–∂–∏–≤–∞–Ω–∏—è'})
#     st.plotly_chart(fig2, use_container_width=True)

# # --- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è ---
# # –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –∏ —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
# X = df.drop(['PassengerId', 'Survived', 'Name', 'Ticket', 'Cabin', 'SurvivalStatus'], axis=1)
# y = df['Survived']

# # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏
# X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42, stratify=y)

# # --- –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ ---
# # –ò—Å–ø–æ–ª—å–∑—É–µ–º TargetEncoder –¥–ª—è 'Sex' –∏ 'Embarked'
# encoder = ce.TargetEncoder(cols=['Sex', 'Embarked'])
# X_train_encoded = encoder.fit_transform(X_train, y_train)
# X_test_encoded = encoder.transform(X_test)

# # --- –û–±—É—á–µ–Ω–∏–µ –∏ –æ—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–µ–π ---
# models = {
#     'Decision Tree': DecisionTreeClassifier(random_state=42),
#     'KNN': KNeighborsClassifier()
# }

# results = []
# for name, model in models.items():
#     # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
#     model.fit(X_train_encoded, y_train)

#     # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏ –æ—Ü–µ–Ω–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏
#     acc_train = accuracy_score(y_train, model.predict(X_train_encoded))
#     acc_test = accuracy_score(y_test, model.predict(X_test_encoded))

#     results.append({
#         'Model': name,
#         'Train Accuracy': round(acc_train, 2),
#         'Test Accuracy': round(acc_test, 2)
#     })

# st.write("### üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –ø–æ —Ç–æ—á–Ω–æ—Å—Ç–∏")
# st.table(pd.DataFrame(results))

# # --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ ---
# st.sidebar.header("üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º")

# # –í–∏–¥–∂–µ—Ç—ã –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
# pclass_input = st.sidebar.selectbox("–ö–ª–∞—Å—Å –±–∏–ª–µ—Ç–∞", sorted(df['Pclass'].unique()))
# sex_input = st.sidebar.selectbox("–ü–æ–ª", df['Sex'].unique())
# age_input = st.sidebar.slider("–í–æ–∑—Ä–∞—Å—Ç", int(df['Age'].min()), int(df['Age'].max()), int(df['Age'].mean()))
# sibsp_input = st.sidebar.slider("–ö–æ–ª-–≤–æ –±—Ä–∞—Ç—å–µ–≤/—Å–µ—Å—Ç–µ—Ä/—Å—É–ø—Ä—É–≥–æ–≤ –Ω–∞ –±–æ—Ä—Ç—É", int(df['SibSp'].min()), int(df['SibSp'].max()), int(df['SibSp'].mode()[0]))
# parch_input = st.sidebar.slider("–ö–æ–ª-–≤–æ —Ä–æ–¥–∏—Ç–µ–ª–µ–π/–¥–µ—Ç–µ–π –Ω–∞ –±–æ—Ä—Ç—É", int(df['Parch'].min()), int(df['Parch'].max()), int(df['Parch'].mode()[0]))
# fare_input = st.sidebar.slider("–°—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞", float(df['Fare'].min()), float(df['Fare'].max()), float(df['Fare'].median()))
# embarked_input = st.sidebar.selectbox("–ü–æ—Ä—Ç –ø–æ—Å–∞–¥–∫–∏", df['Embarked'].unique())

# # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
# user_input = pd.DataFrame([{
#     'Pclass': pclass_input,
#     'Sex': sex_input,
#     'Age': age_input,
#     'SibSp': sibsp_input,
#     'Parch': parch_input,
#     'Fare': fare_input,
#     'Embarked': embarked_input
# }])

# # –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
# user_encoded = encoder.transform(user_input)
# # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–æ—Ä—è–¥–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–±—É—á–∞—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
# user_encoded = user_encoded[X_train_encoded.columns]


# st.sidebar.subheader("üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
# for name, model in models.items():
#     # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
#     pred_val = model.predict(user_encoded)[0]
#     pred_text = "–í—ã–∂–∏–ª" if pred_val == 1 else "–ù–µ –≤—ã–∂–∏–ª"
#     proba = model.predict_proba(user_encoded)[0]

#     st.sidebar.markdown(f"**{name}: {pred_text}**")
#     proba_df = pd.DataFrame({
#         '–°—Ç–∞—Ç—É—Å': ['–ù–µ –≤—ã–∂–∏–ª', '–í—ã–∂–∏–ª'],
#         '–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å': proba
#     })
#     st.sidebar.dataframe(proba_df.set_index("–°—Ç–∞—Ç—É—Å"), use_container_width=True)


# # --- –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ ---
# tab1, tab2, tab3 = st.tabs(["üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö", "ü§ñ –û–±—É—á–µ–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–µ–π", "üîÆ –°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑"])

# # --- –í–ö–õ–ê–î–ö–ê 1: –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• ---
# with tab1:
#     st.header("–û–±–∑–æ—Ä –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
#     st.write("### üìã –î–∞–Ω–Ω—ã–µ –æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞—Ö")
#     st.dataframe(df.head(10), use_container_width=True)

#     st.write("### üìà –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏")
#     col1, col2 = st.columns(2)
#     with col1:
#         # –í—ã–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
#         feature_to_plot = st.selectbox(
#             "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—ã–∂–∏–≤—à–∏—Ö:",
#             ('Pclass', 'Sex', 'Embarked', 'FamilySize', 'Title')
#         )
#         fig1 = px.histogram(df, x=feature_to_plot, color="SurvivalStatus", barmode="group",
#                             title=f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã–∂–∏–≤—à–∏—Ö –ø–æ –ø—Ä–∏–∑–Ω–∞–∫—É '{feature_to_plot}'",
#                             labels={'SurvivalStatus': '–°—Ç–∞—Ç—É—Å –≤—ã–∂–∏–≤–∞–Ω–∏—è'},
#                             color_discrete_map={'–ù–µ –≤—ã–∂–∏–ª': '#EF553B', '–í—ã–∂–∏–ª': '#636EFA'})
#         st.plotly_chart(fig1, use_container_width=True)

#     with col2:
#         # Violin plot –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
#         fig2 = px.violin(df, x="Sex", y="Age", color="SurvivalStatus", box=True, points="all",
#                          title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–æ –ø–æ–ª—É –∏ —Å—Ç–∞—Ç—É—Å—É –≤—ã–∂–∏–≤–∞–Ω–∏—è",
#                          labels={'Sex': '–ü–æ–ª', 'Age': '–í–æ–∑—Ä–∞—Å—Ç', 'SurvivalStatus': '–°—Ç–∞—Ç—É—Å –≤—ã–∂–∏–≤–∞–Ω–∏—è'},
#                          color_discrete_map={'–ù–µ –≤—ã–∂–∏–ª': '#EF553B', '–í—ã–∂–∏–ª': '#636EFA'})
#         st.plotly_chart(fig2, use_container_width=True)

#     st.write("### ‚òÄÔ∏è –ò–µ—Ä–∞—Ä—Ö–∏—è –≤—ã–∂–∏–≤–∞–Ω–∏—è")
#     # Sunburst chart

#     # Sunburst chart

#     fig3 = px.sunburst(df, path=['Pclass', 'Sex', 'SurvivalStatus'],
#                            title="–ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã–∂–∏–≤—à–∏—Ö –ø–æ –∫–ª–∞—Å—Å—É –∏ –ø–æ–ª—É",
#                            color_discrete_map={'(?)':'gold', '–ù–µ –≤—ã–∂–∏–ª': '#EF553B', '–í—ã–∂–∏–ª': '#636EFA'})
#     st.plotly_chart(fig3, use_container_width=True)


# # --- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–¥–µ–ª–µ–π ---
# features = ['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked', 'FamilySize', 'IsAlone', 'Title']
# X = df[features]
# y = df['Survived']

# X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42, stratify=y)

# encoder = ce.TargetEncoder(cols=['Sex', 'Embarked', 'Title', 'IsAlone'])
# X_train_encoded = encoder.fit_transform(X_train, y_train)
# X_test_encoded = encoder.transform(X_test)

# # --- –í–ö–õ–ê–î–ö–ê 2: –û–ë–£–ß–ï–ù–ò–ï –ò –ù–ê–°–¢–†–û–ô–ö–ê –ú–û–î–ï–õ–ï–ô ---
# with tab2:
#     st.header("–í—ã–±–æ—Ä –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è")
#     model_choice = st.selectbox(
#         "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –æ–±—É—á–µ–Ω–∏—è:",
#         ("Decision Tree", "K-Nearest Neighbors", "Logistic Regression", "Random Forest")
#     )

#     params = {}
#     if model_choice == "Decision Tree":
#         params['max_depth'] = st.slider("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ –¥–µ—Ä–µ–≤–∞ (max_depth)", 2, 20, 5, 1)
#         params['min_samples_leaf'] = st.slider("–ú–∏–Ω. —á–∏—Å–ª–æ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –ª–∏—Å—Ç–µ (min_samples_leaf)", 1, 50, 5, 1)
#         model = DecisionTreeClassifier(random_state=42, **params)
#     elif model_choice == "K-Nearest Neighbors":
#         params['n_neighbors'] = st.slider("–ß–∏—Å–ª–æ —Å–æ—Å–µ–¥–µ–π (n_neighbors)", 1, 20, 5, 1)
#         model = KNeighborsClassifier(**params)
#     elif model_choice == "Logistic Regression":
#         params['C'] = st.slider("–°–∏–ª–∞ —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏–∏ (C)", 0.01, 10.0, 1.0, 0.01)
#         model = LogisticRegression(random_state=42, max_iter=1000, **params)
#     elif model_choice == "Random Forest":
#         params['n_estimators'] = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ä–µ–≤—å–µ–≤ (n_estimators)", 50, 500, 100, 10)
#         params['max_depth'] = st.slider("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ –¥–µ—Ä–µ–≤–∞ (max_depth)", 2, 20, 7, 1)
#         model = RandomForestClassifier(random_state=42, **params)

#     if st.button("üöÄ –û–±—É—á–∏—Ç—å –∏ –æ—Ü–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å", use_container_width=True):
#         # –û–±—É—á–µ–Ω–∏–µ
#         model.fit(X_train_encoded, y_train)
#         y_pred_train = model.predict(X_train_encoded)
#         y_pred_test = model.predict(X_test_encoded)
#         acc_train = accuracy_score(y_train, y_pred_train)
#         acc_test = accuracy_score(y_test, y_pred_test)

#         st.write("### –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ü–µ–Ω–∫–∏:")
#         col1, col2 = st.columns(2)
#         col1.metric("–¢–æ—á–Ω–æ—Å—Ç—å –Ω–∞ –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–µ", f"{acc_train:.2%}")
#         col2.metric("–¢–æ—á–Ω–æ—Å—Ç—å –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ", f"{acc_test:.2%}")

#         # –ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫
#         cm = confusion_matrix(y_test, y_pred_test)
#         fig_cm = px.imshow(cm, text_auto=True, aspect="auto",
#                            labels=dict(x="–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å", y="–ò—Å—Ç–∏–Ω–Ω—ã–π –∫–ª–∞—Å—Å", color="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"),
#                            x=['–ù–µ –≤—ã–∂–∏–ª', '–í—ã–∂–∏–ª'], y=['–ù–µ –≤—ã–∂–∏–ª', '–í—ã–∂–∏–ª'],
#                            color_continuous_scale='Blues',
#                            title="–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫")
#         st.plotly_chart(fig_cm, use_container_width=True)

#         # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å –≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞ –¥—Ä—É–≥–æ–π –≤–∫–ª–∞–¥–∫–µ
#         st.session_state['model'] = model
#         st.success("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è!")


# # --- –í–ö–õ–ê–î–ö–ê 3: –°–î–ï–õ–ê–¢–¨ –ü–†–û–ì–ù–û–ó ---
# with tab3:
#     st.header("–ü—Ä–æ–≥–Ω–æ–∑ –≤—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏ –ø–∞—Å—Å–∞–∂–∏—Ä–∞")
#     if 'model' not in st.session_state:
#         st.warning("–°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å –Ω–∞ –≤–∫–ª–∞–¥–∫–µ '–û–±—É—á–µ–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–µ–π'!")
#     else:
#         st.info("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞—Å—Å–∞–∂–∏—Ä–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑.")
#         col1, col2 = st.columns(2)
#         with col1:
#             pclass_input = st.selectbox("–ö–ª–∞—Å—Å –±–∏–ª–µ—Ç–∞", sorted(df['Pclass'].unique()), key='pclass')
#             sex_input = st.selectbox("–ü–æ–ª", df['Sex'].unique(), key='sex')
#             age_input = st.slider("–í–æ–∑—Ä–∞—Å—Ç", 0, 100, 30, key='age')
#             fare_input = st.slider("–°—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞", 0.0, float(df['Fare'].max()), 32.0, key='fare')

#         with col2:
#             sibsp_input = st.number_input("–ö–æ–ª-–≤–æ –±—Ä–∞—Ç—å–µ–≤/—Å–µ—Å—Ç–µ—Ä/—Å—É–ø—Ä—É–≥–æ–≤", min_value=0, max_value=10, value=0, key='sibsp')
#             parch_input = st.number_input("–ö–æ–ª-–≤–æ —Ä–æ–¥–∏—Ç–µ–ª–µ–π/–¥–µ—Ç–µ–π", min_value=0, max_value=10, value=0, key='parch')
#             embarked_input = st.selectbox("–ü–æ—Ä—Ç –ø–æ—Å–∞–¥–∫–∏", df['Embarked'].unique(), key='embarked')
#             title_input = st.selectbox("–¢–∏—Ç—É–ª", df['Title'].unique(), key='title')


#         if st.button("–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑", use_container_width=True, type="primary"):
#             family_size = sibsp_input + parch_input + 1
#             is_alone = (family_size == 1)

#             user_input = pd.DataFrame([{
#                 'Pclass': pclass_input,
#                 'Sex': sex_input,
#                 'Age': age_input,
#                 'SibSp': sibsp_input,
#                 'Parch': parch_input,
#                 'Fare': fare_input,
#                 'Embarked': embarked_input,
#                 'FamilySize': family_size,
#                 'IsAlone': is_alone,
#                 'Title': title_input
#             }])

#             # –ö–æ–¥–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥
#             user_encoded = encoder.transform(user_input)
#             user_encoded = user_encoded[X_train_encoded.columns]

#             # –î–µ–ª–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
#             model = st.session_state['model']
#             prediction = model.predict(user_encoded)[0]
#             probability = model.predict_proba(user_encoded)[0]

#             # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
#             result_col1, result_col2 = st.columns([1, 2])
#             with result_col1:
#                 if prediction == 1:
#                     st.metric(label="–ü—Ä–æ–≥–Ω–æ–∑", value="–í—ã–∂–∏–ª", delta="–í—ã—Å–æ–∫–∏–µ —à–∞–Ω—Å—ã")
#                     st.image("https://em-content.zobj.net/source/microsoft-teams/363/lifebuoy_1f6df.png", width=150)
#                 else:
#                     st.metric(label="–ü—Ä–æ–≥–Ω–æ–∑", value="–ù–µ –≤—ã–∂–∏–ª", delta="–ù–∏–∑–∫–∏–µ —à–∞–Ω—Å—ã", delta_color="inverse")
#                     st.image("https://em-content.zobj.net/source/microsoft-teams/363/skull-and-crossbones_2620-fe0f.png", width=150)

#             with result_col2:
#                 # Gauge chart –¥–ª—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
#                 fig_gauge = go.Figure(go.Indicator(
#                     mode = "gauge+number",
#                     value = probability[1] * 100,
#                     title = {'text': "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–∂–∏—Ç—å (%)"},
#                     gauge = {'axis': {'range': [None, 100]},
#                              'bar': {'color': "#636EFA"},
#                              'steps' : [
#                                  {'range': [0, 50], 'color': "#F0F2F6"},
#                                  {'range': [50, 100], 'color': "#D6EAF8"}],
#                             }))
#                 st.plotly_chart(fig_gauge, use_container_width=True)




# #     fig3 = px.sunburst(df, path=['Pclass', 'Sex', 'SurvivalStatus'],
# #                        title="–ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã–∂–∏–≤—à–∏—Ö –ø–æ –∫–ª–∞—Å—Å—É –∏ –ø–æ–ª—É",
# #                        color_discrete_map={'(?)':'gold', '–ù–µ –≤—ã–∂–∏–ª': '#EF553B', '–í—ã–∂–∏–ª': '#636EFA'})
# #     st.plotly_chart(fig3, use_container_width=True)


# # # --- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–¥–µ–ª–µ–π ---
# # features = ['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked', 'FamilySize', 'IsAlone', 'Title']
# # X = df[features]
# # y = df['Survived']

# # X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42, stratify=y)

# # encoder = ce.TargetEncoder(cols=['Sex', 'Embarked', 'Title', 'IsAlone'])
# # X_train_encoded = encoder.fit_transform(X_train, y_train)
# # X_test_encoded = encoder.transform(X_test)


# # # --- –í–ö–õ–ê–î–ö–ê 2: –û–ë–£–ß–ï–ù–ò–ï –ò –ù–ê–°–¢–†–û–ô–ö–ê –ú–û–î–ï–õ–ï–ô ---
# # with tab2:
# #     st.header("–í—ã–±–æ—Ä –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è")
# #     model_choice = st.selectbox(
# #         "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –æ–±—É—á–µ–Ω–∏—è:",
# #         ("Decision Tree", "K-Nearest Neighbors", "Logistic Regression", "Random Forest")
# #     )

# #     params = {}
# #     if model_choice == "Decision Tree":
# #         params['max_depth'] = st.slider("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ –¥–µ—Ä–µ–≤–∞ (max_depth)", 2, 20, 5, 1)
# #         params['min_samples_leaf'] = st.slider("–ú–∏–Ω. —á–∏—Å–ª–æ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –ª–∏—Å—Ç–µ (min_samples_leaf)", 1, 50, 5, 1)
# #         model = DecisionTreeClassifier(random_state=42, **params)
# #     elif model_choice == "K-Nearest Neighbors":
# #         params['n_neighbors'] = st.slider("–ß–∏—Å–ª–æ —Å–æ—Å–µ–¥–µ–π (n_neighbors)", 1, 20, 5, 1)
# #         model = KNeighborsClassifier(**params)
# #     elif model_choice == "Logistic Regression":
# #         params['C'] = st.slider("–°–∏–ª–∞ —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏–∏ (C)", 0.01, 10.0, 1.0, 0.01)
# #         model = LogisticRegression(random_state=42, max_iter=1000, **params)
# #     elif model_choice == "Random Forest":
# #         params['n_estimators'] = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ä–µ–≤—å–µ–≤ (n_estimators)", 50, 500, 100, 10)
# #         params['max_depth'] = st.slider("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ –¥–µ—Ä–µ–≤–∞ (max_depth)", 2, 20, 7, 1)
# #         model = RandomForestClassifier(random_state=42, **params)

# #     if st.button("üöÄ –û–±—É—á–∏—Ç—å –∏ –æ—Ü–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å", use_container_width=True):
# #         # –û–±—É—á–µ–Ω–∏–µ
# #         model.fit(X_train_encoded, y_train)
# #         y_pred_train = model.predict(X_train_encoded)
# #         y_pred_test = model.predict(X_test_encoded)
# #         acc_train = accuracy_score(y_train, y_pred_train)
# #         acc_test = accuracy_score(y_test, y_pred_test)

# #         st.write("### –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ü–µ–Ω–∫–∏:")
# #         col1, col2 = st.columns(2)
# #         col1.metric("–¢–æ—á–Ω–æ—Å—Ç—å –Ω–∞ –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–µ", f"{acc_train:.2%}")
# #         col2.metric("–¢–æ—á–Ω–æ—Å—Ç—å –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ", f"{acc_test:.2%}")

# #         # –ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫
# #         cm = confusion_matrix(y_test, y_pred_test)
# #         fig_cm = px.imshow(cm, text_auto=True, aspect="auto",
# #                            labels=dict(x="–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å", y="–ò—Å—Ç–∏–Ω–Ω—ã–π –∫–ª–∞—Å—Å", color="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"),
# #                            x=['–ù–µ –≤—ã–∂–∏–ª', '–í—ã–∂–∏–ª'], y=['–ù–µ –≤—ã–∂–∏–ª', '–í—ã–∂–∏–ª'],
# #                            color_continuous_scale='Blues',
# #                            title="–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫")
# #         st.plotly_chart(fig_cm, use_container_width=True)

# #         # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å –≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞ –¥—Ä—É–≥–æ–π –≤–∫–ª–∞–¥–∫–µ
# #         st.session_state['model'] = model
# #         st.success("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è!")


# # # --- –í–ö–õ–ê–î–ö–ê 3: –°–î–ï–õ–ê–¢–¨ –ü–†–û–ì–ù–û–ó ---
# # with tab3:
# #     st.header("–ü—Ä–æ–≥–Ω–æ–∑ –≤—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏ –ø–∞—Å—Å–∞–∂–∏—Ä–∞")
# #     if 'model' not in st.session_state:
# #         st.warning("–°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å –Ω–∞ –≤–∫–ª–∞–¥–∫–µ '–û–±—É—á–µ–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–µ–π'!")
# #     else:
# #         st.info("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞—Å—Å–∞–∂–∏—Ä–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑.")
# #         col1, col2 = st.columns(2)
# #         with col1:
# #             pclass_input = st.selectbox("–ö–ª–∞—Å—Å –±–∏–ª–µ—Ç–∞", sorted(df['Pclass'].unique()), key='pclass')
# #             sex_input = st.selectbox("–ü–æ–ª", df['Sex'].unique(), key='sex')
# #             age_input = st.slider("–í–æ–∑—Ä–∞—Å—Ç", 0, 100, 30, key='age')
# #             fare_input = st.slider("–°—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞", 0.0, float(df['Fare'].max()), 32.0, key='fare')

# #         with col2:
# #             sibsp_input = st.number_input("–ö–æ–ª-–≤–æ –±—Ä–∞—Ç—å–µ–≤/—Å–µ—Å—Ç–µ—Ä/—Å—É–ø—Ä—É–≥–æ–≤", min_value=0, max_value=10, value=0, key='sibsp')
# #             parch_input = st.number_input("–ö–æ–ª-–≤–æ —Ä–æ–¥–∏—Ç–µ–ª–µ–π/–¥–µ—Ç–µ–π", min_value=0, max_value=10, value=0, key='parch')
# #             embarked_input = st.selectbox("–ü–æ—Ä—Ç –ø–æ—Å–∞–¥–∫–∏", df['Embarked'].unique(), key='embarked')
# #             title_input = st.selectbox("–¢–∏—Ç—É–ª", df['Title'].unique(), key='title')


# #         if st.button("–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑", use_container_width=True, type="primary"):
# #             family_size = sibsp_input + parch_input + 1
# #             is_alone = (family_size == 1)

# #             user_input = pd.DataFrame([{
# #                 'Pclass': pclass_input,
# #                 'Sex': sex_input,
# #                 'Age': age_input,
# #                 'SibSp': sibsp_input,
# #                 'Parch': parch_input,
# #                 'Fare': fare_input,
# #                 'Embarked': embarked_input,
# #                 'FamilySize': family_size,
# #                 'IsAlone': is_alone,
# #                 'Title': title_input
# #             }])

# #             # –ö–æ–¥–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥
# #             user_encoded = encoder.transform(user_input)
# #             user_encoded = user_encoded[X_train_encoded.columns]

# #             # –î–µ–ª–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
# #             model = st.session_state['model']
# #             prediction = model.predict(user_encoded)[0]
# #             probability = model.predict_proba(user_encoded)[0]

# #             # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
# #             result_col1, result_col2 = st.columns([1, 2])
# #             with result_col1:
# #                 if prediction == 1:
# #                     st.metric(label="–ü—Ä–æ–≥–Ω–æ–∑", value="–í—ã–∂–∏–ª", delta="–í—ã—Å–æ–∫–∏–µ —à–∞–Ω—Å—ã")
# #                     st.image("https://em-content.zobj.net/source/microsoft-teams/363/lifebuoy_1f6df.png", width=150)
# #                 else:
# #                     st.metric(label="–ü—Ä–æ–≥–Ω–æ–∑", value="–ù–µ –≤—ã–∂–∏–ª", delta="–ù–∏–∑–∫–∏–µ —à–∞–Ω—Å—ã", delta_color="inverse")
# #                     st.image("https://em-content.zobj.net/source/microsoft-teams/363/skull-and-crossbones_2620-fe0f.png", width=150)

# #             with result_col2:
# #                 # Gauge chart –¥–ª—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
# #                 fig_gauge = go.Figure(go.Indicator(
# #                     mode = "gauge+number",
# #                     value = probability[1] * 100,
# #                     title = {'text': "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–∂–∏—Ç—å (%)"},
# #                     gauge = {'axis': {'range': [None, 100]},
# #                              'bar': {'color': "#636EFA"},
# #                              'steps' : [
# #                                  {'range': [0, 50], 'color': "#F0F2F6"},
# #                                  {'range': [50, 100], 'color': "#D6EAF8"}],
# #                             }))
# #                 st.plotly_chart(fig_gauge, use_container_width=True)
