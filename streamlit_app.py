import streamlit as st
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
import category_encoders as ce
import plotly.express as px


# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit ---
st.set_page_config(page_title="üö¢ –ü—Ä–æ–≥–Ω–æ–∑ –≤—ã–∂–∏–≤–∞–Ω–∏—è –Ω–∞ –¢–∏—Ç–∞–Ω–∏–∫–µ", layout="wide")
st.title('üö¢ –ü—Ä–æ–≥–Ω–æ–∑ –≤—ã–∂–∏–≤–∞–Ω–∏—è –Ω–∞ –¢–∏—Ç–∞–Ω–∏–∫–µ - –û–±—É—á–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ')
st.write('## –†–∞–±–æ—Ç–∞ —Å –¥–∞—Ç–∞—Å–µ—Ç–æ–º –¢–∏—Ç–∞–Ω–∏–∫–∞')


df = pd.read_csv("https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv")

# --- –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
# –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–ø—É—Å–∫–∏ –≤ 'Age' –º–µ–¥–∏–∞–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
df['Age'].fillna(df['Age'].median(), inplace=True)
# –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–ø—É—Å–∫–∏ –≤ 'Embarked' —Å–∞–º—ã–º —á–∞—Å—Ç—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º (–º–æ–¥–æ–π)
df['Embarked'].fillna(df['Embarked'].mode()[0], inplace=True)
# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º 'Survived' –≤ –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω—ã–µ –º–µ—Ç–∫–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
df['SurvivalStatus'] = df['Survived'].map({0: '–ù–µ –≤—ã–∂–∏–ª', 1: '–í—ã–∂–∏–ª'})


st.subheader("üîç –°–ª—É—á–∞–π–Ω—ã–µ 10 —Å—Ç—Ä–æ–∫")
st.dataframe(df.sample(10), use_container_width=True)

st.subheader("üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
col1, col2 = st.columns(2)

with col1:
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã–∂–∏–≤—à–∏—Ö –ø–æ –∫–ª–∞—Å—Å—É –±–∏–ª–µ—Ç–∞
    fig1 = px.histogram(df, x="Pclass", color="SurvivalStatus", barmode="group",
                        title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã–∂–∏–≤—à–∏—Ö –ø–æ –∫–ª–∞—Å—Å—É –±–∏–ª–µ—Ç–∞",
                        labels={'Pclass': '–ö–ª–∞—Å—Å –±–∏–ª–µ—Ç–∞', 'SurvivalStatus': '–°—Ç–∞—Ç—É—Å –≤—ã–∂–∏–≤–∞–Ω–∏—è'})
    st.plotly_chart(fig1, use_container_width=True)

with col2:
    # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –≤—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏ –æ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏ –ø–æ–ª–∞
    fig2 = px.scatter(df, x="Age", y="Fare", color="SurvivalStatus",
                      title="–°—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞ vs –í–æ–∑—Ä–∞—Å—Ç",
                      labels={'Age': '–í–æ–∑—Ä–∞—Å—Ç', 'Fare': '–°—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞', 'SurvivalStatus': '–°—Ç–∞—Ç—É—Å –≤—ã–∂–∏–≤–∞–Ω–∏—è'})
    st.plotly_chart(fig2, use_container_width=True)

# --- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è ---
# –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –∏ —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
X = df.drop(['PassengerId', 'Survived', 'Name', 'Ticket', 'Cabin', 'SurvivalStatus'], axis=1)
y = df['Survived']

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42, stratify=y)

# --- –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ ---
# –ò—Å–ø–æ–ª—å–∑—É–µ–º TargetEncoder –¥–ª—è 'Sex' –∏ 'Embarked'
encoder = ce.TargetEncoder(cols=['Sex', 'Embarked'])
X_train_encoded = encoder.fit_transform(X_train, y_train)
X_test_encoded = encoder.transform(X_test)

# --- –û–±—É—á–µ–Ω–∏–µ –∏ –æ—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–µ–π ---
models = {
    'Decision Tree': DecisionTreeClassifier(random_state=42),
    'KNN': KNeighborsClassifier()
}

results = []
for name, model in models.items():
    # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    model.fit(X_train_encoded, y_train)

    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏ –æ—Ü–µ–Ω–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏
    acc_train = accuracy_score(y_train, model.predict(X_train_encoded))
    acc_test = accuracy_score(y_test, model.predict(X_test_encoded))

    results.append({
        'Model': name,
        'Train Accuracy': round(acc_train, 2),
        'Test Accuracy': round(acc_test, 2)
    })

st.write("### üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –ø–æ —Ç–æ—á–Ω–æ—Å—Ç–∏")
st.table(pd.DataFrame(results))

# --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ ---
st.sidebar.header("üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º")

# –í–∏–¥–∂–µ—Ç—ã –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
pclass_input = st.sidebar.selectbox("–ö–ª–∞—Å—Å –±–∏–ª–µ—Ç–∞", sorted(df['Pclass'].unique()))
sex_input = st.sidebar.selectbox("–ü–æ–ª", df['Sex'].unique())
age_input = st.sidebar.slider("–í–æ–∑—Ä–∞—Å—Ç", int(df['Age'].min()), int(df['Age'].max()), int(df['Age'].mean()))
sibsp_input = st.sidebar.slider("–ö–æ–ª-–≤–æ –±—Ä–∞—Ç—å–µ–≤/—Å–µ—Å—Ç–µ—Ä/—Å—É–ø—Ä—É–≥–æ–≤ –Ω–∞ –±–æ—Ä—Ç—É", int(df['SibSp'].min()), int(df['SibSp'].max()), int(df['SibSp'].mode()[0]))
parch_input = st.sidebar.slider("–ö–æ–ª-–≤–æ —Ä–æ–¥–∏—Ç–µ–ª–µ–π/–¥–µ—Ç–µ–π –Ω–∞ –±–æ—Ä—Ç—É", int(df['Parch'].min()), int(df['Parch'].max()), int(df['Parch'].mode()[0]))
fare_input = st.sidebar.slider("–°—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞", float(df['Fare'].min()), float(df['Fare'].max()), float(df['Fare'].median()))
embarked_input = st.sidebar.selectbox("–ü–æ—Ä—Ç –ø–æ—Å–∞–¥–∫–∏", df['Embarked'].unique())

# –°–æ–∑–¥–∞–Ω–∏–µ DataFrame –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
user_input = pd.DataFrame([{
    'Pclass': pclass_input,
    'Sex': sex_input,
    'Age': age_input,
    'SibSp': sibsp_input,
    'Parch': parch_input,
    'Fare': fare_input,
    'Embarked': embarked_input
}])

# –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
user_encoded = encoder.transform(user_input)
# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–æ—Ä—è–¥–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–±—É—á–∞—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
user_encoded = user_encoded[X_train_encoded.columns]


st.sidebar.subheader("üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
for name, model in models.items():
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
    pred_val = model.predict(user_encoded)[0]
    pred_text = "–í—ã–∂–∏–ª" if pred_val == 1 else "–ù–µ –≤—ã–∂–∏–ª"
    proba = model.predict_proba(user_encoded)[0]

    st.sidebar.markdown(f"**{name}: {pred_text}**")
    proba_df = pd.DataFrame({
        '–°—Ç–∞—Ç—É—Å': ['–ù–µ –≤—ã–∂–∏–ª', '–í—ã–∂–∏–ª'],
        '–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å': proba
    })
    st.sidebar.dataframe(proba_df.set_index("–°—Ç–∞—Ç—É—Å"), use_container_width=True)


# st.subheader("üîç –°–ª—É—á–∞–π–Ω—ã–µ 10 —Å—Ç—Ä–æ–∫")
# st.dataframe(df.sample(10), use_container_width=True)

# st.subheader("üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
# col1, col2 = st.columns(2)

# @st.cache_data
# def load_and_preprocess_data():
#     df = pd.read_csv("titanic.csv")
    
#     # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
#     df.drop(['Name', 'Ticket', 'Cabin', 'PassengerId'], axis=1, inplace=True)
#     df['Age'].fillna(df['Age'].median(), inplace=True)
#     df['Embarked'].fillna(df['Embarked'].mode()[0], inplace=True)
    
#     return df

# df = load_and_preprocess_data()

# st.subheader("üîç –°–ª—É—á–∞–π–Ω—ã–µ 10 —Å—Ç—Ä–æ–∫")
# st.dataframe(df.sample(10), use_container_width=True)

# st.subheader("üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
# col1, col2 = st.columns(2)

# with col1:
#     fig1 = px.histogram(df, x="Survived", color="Sex", barmode="group",
#                         title="–í—ã–∂–∏–≤–∞–Ω–∏–µ –ø–æ –ø–æ–ª—É")
#     st.plotly_chart(fig1, use_container_width=True)

# with col2:
#     fig2 = px.histogram(df, x="Age", color="Survived", marginal="rug",
#                         title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–æ –≤—ã–∂–∏–≤–∞–Ω–∏—é")
#     st.plotly_chart(fig2, use_container_width=True)

# # –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–†–ò–ó–ù–ê–ö–û–í –ò –¶–ï–õ–ï–í–û–ô –ü–ï–†–ï–ú–ï–ù–ù–û–ô
# X = df.drop(['Survived'], axis=1)
# y = df['Survived']

# # –†–ê–ó–î–ï–õ–ï–ù–ò–ï –î–ê–ù–ù–´–•
# X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# # –ö–û–î–ò–†–û–í–ê–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ê–õ–¨–ù–´–• –ü–†–ò–ó–ù–ê–ö–û–í
# categorical_cols = ['Pclass', 'Sex', 'Embarked']
# encoder = ce.TargetEncoder(cols=categorical_cols)

# X_train_encoded = encoder.fit_transform(X_train, y_train)
# X_test_encoded = encoder.transform(X_test)

# # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RandomForestClassifier, –∫–∞–∫ –±—ã–ª–æ —É–∫–∞–∑–∞–Ω–æ –≤ –∑–∞–¥–∞–Ω–∏–∏
# model = RandomForestClassifier(n_estimators=100, random_state=42)

# # –û–ë–£–ß–ï–ù–ò–ï –ú–û–î–ï–õ–ò
# model.fit(X_train_encoded, y_train)

# # –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–Ø –ò –û–¶–ï–ù–ö–ê –¢–û–ß–ù–û–°–¢–ò
# acc_train = accuracy_score(y_train, model.predict(X_train_encoded))
# acc_test = accuracy_score(y_test, model.predict(X_test_encoded))      
    
# results = pd.DataFrame([{
#     'Model': 'RandomForestClassifier',
#     'Train Accuracy': round(acc_train, 2),
#     'Test Accuracy': round(acc_test, 2)
# }])

# st.write("### üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –ø–æ —Ç–æ—á–Ω–æ—Å—Ç–∏")
# st.table(results)
