import streamlit as st
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
import category_encoders as ce
import plotly.express as px


# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit ---
st.set_page_config(page_title="üö¢ –ü—Ä–æ–≥–Ω–æ–∑ –≤—ã–∂–∏–≤–∞–Ω–∏—è –Ω–∞ –¢–∏—Ç–∞–Ω–∏–∫–µ", layout="wide")
st.title('üö¢ –ü—Ä–æ–≥–Ω–æ–∑ –≤—ã–∂–∏–≤–∞–Ω–∏—è –Ω–∞ –¢–∏—Ç–∞–Ω–∏–∫–µ - –û–±—É—á–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ')
st.write('## –†–∞–±–æ—Ç–∞ —Å –¥–∞—Ç–∞—Å–µ—Ç–æ–º –¢–∏—Ç–∞–Ω–∏–∫–∞')

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_and_preprocess_data():
    df = pd.read_csv("titanic.csv")
    
    # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    df.drop(['Name', 'Ticket', 'Cabin', 'PassengerId'], axis=1, inplace=True)
    df['Age'].fillna(df['Age'].median(), inplace=True)
    df['Embarked'].fillna(df['Embarked'].mode()[0], inplace=True)
    
    return df

df = load_and_preprocess_data()

st.subheader("üîç –°–ª—É—á–∞–π–Ω—ã–µ 10 —Å—Ç—Ä–æ–∫")
st.dataframe(df.sample(10), use_container_width=True)

st.subheader("üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
col1, col2 = st.columns(2)

with col1:
    fig1 = px.histogram(df, x="Survived", color="Sex", barmode="group",
                        title="–í—ã–∂–∏–≤–∞–Ω–∏–µ –ø–æ –ø–æ–ª—É")
    st.plotly_chart(fig1, use_container_width=True)

with col2:
    fig2 = px.histogram(df, x="Age", color="Survived", marginal="rug",
                        title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–æ –≤—ã–∂–∏–≤–∞–Ω–∏—é")
    st.plotly_chart(fig2, use_container_width=True)

# –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–†–ò–ó–ù–ê–ö–û–í –ò –¶–ï–õ–ï–í–û–ô –ü–ï–†–ï–ú–ï–ù–ù–û–ô
X = df.drop(['Survived'], axis=1)
y = df['Survived']

# –†–ê–ó–î–ï–õ–ï–ù–ò–ï –î–ê–ù–ù–´–•
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# –ö–û–î–ò–†–û–í–ê–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ê–õ–¨–ù–´–• –ü–†–ò–ó–ù–ê–ö–û–í
categorical_cols = ['Pclass', 'Sex', 'Embarked']
encoder = ce.TargetEncoder(cols=categorical_cols)

X_train_encoded = encoder.fit_transform(X_train, y_train)
X_test_encoded = encoder.transform(X_test)

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RandomForestClassifier, –∫–∞–∫ –±—ã–ª–æ —É–∫–∞–∑–∞–Ω–æ –≤ –∑–∞–¥–∞–Ω–∏–∏
model = RandomForestClassifier(n_estimators=100, random_state=42)

# –û–ë–£–ß–ï–ù–ò–ï –ú–û–î–ï–õ–ò
model.fit(X_train_encoded, y_train)

# –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–Ø –ò –û–¶–ï–ù–ö–ê –¢–û–ß–ù–û–°–¢–ò
acc_train = accuracy_score(y_train, model.predict(X_train_encoded))
acc_test = accuracy_score(y_test, model.predict(X_test_encoded))      
    
results = pd.DataFrame([{
    'Model': 'RandomForestClassifier',
    'Train Accuracy': round(acc_train, 2),
    'Test Accuracy': round(acc_test, 2)
}])

st.write("### üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –ø–æ —Ç–æ—á–Ω–æ—Å—Ç–∏")
st.table(results)
